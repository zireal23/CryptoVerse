version: "3"
networks:
  kafka_network:
    name: cryptoKafkaNetwork
services:
  zookeeper:
    image: 'wurstmeister/zookeeper:latest'
    container_name: zookeeper
    networks:
      - kafka_network
    ports:
      - 22181:2181
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
  kafka:
    image: 'wurstmeister/kafka:latest' 
    container_name: kafka 
    ports:
      - 29092:29092
      - 29093:29093
    networks:
      - kafka_network
    depends_on:
      - zookeeper
    environment:
        KAFKA_BROKER_ID: 1
        KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
        # KAFKA_ADVERTISED_HOST_NAME: kafka
        KAFKA_LISTENERS: EXTERNAL_SAME_HOST://:29092,EXTERNAL_DIFFERENT_HOST://:29093,INTERNAL://:9092
        KAFKA_ADVERTISED_LISTENERS: INTERNAL://KAFKA:9092,EXTERNAL_SAME_HOST://localhost:29092
        KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL_SAME_HOST:PLAINTEXT,EXTERNAL_DIFFERENT_HOST:PLAINTEXT
        KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
        ALLOW_PLAINTEXT_LISTENER: yes
        KAFKA_CREATE_TOPICS: "cryptoTopic:1:1:delete"
  cryptokafkaproducer:
      container_name: cryptokafkaproducer
      build:  
        context: ./
        dockerfile: dockerfile
      stdin_open: true
      tty: true
      environment:
        KAFKA_CONNECTION: kafka:9092
        KAFKA_TOPIC: cryptoTopic
      networks:
        - kafka_network
      env_file:
        - .env
      depends_on:
        - kafka
  kafdrop:
    image: obsidiandynamics/kafdrop
    restart: "no"
    networks:
      - kafka_network
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:9092"
      JVM_OPTS: "-Xms16M -Xmx48M -Xss180K -XX:-TieredCompilation -XX:+UseStringDeduplication -noverify"
    depends_on:
      - "kafka"